services:
  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
    env_file:
      - .env
    environment:
      # ---------- NODE_FUNCTION_ALLOW_EXTERNAL ----------
      - NODE_FUNCTION_ALLOW_EXTERNAL=@xmldom/xmldom

      # ---------- N8N ----------
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}

      # ---------- DATABASE (pick ONE block) ----------
      # 1. Keep default SQLite (good for quick local dev)
      # - DB_TYPE=sqlite
      # - DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite
      # - DB_SQLITE_VACUUM_ON_STARTUP=true

      # 2. OR migrate later to Postgres (uncomment lines below)
      # - DB_TYPE=postgresdb
      # - DB_POSTGRESDB_HOST=db
      # - DB_POSTGRESDB_PORT=5432
      # - DB_POSTGRESDB_DATABASE=n8n
      # - DB_POSTGRESDB_USER=n8n
      # - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - n8n_data:/home/node/.n8n
      - ./local-files:/files
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # depends_on:
      # - db           # becomes a no-op if you stay on SQLite

  # Optional Postgres service (comment out if staying on SQLite)
  # db:
  #   image: postgres:15
  #   container_name: n8n_db
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_USER=n8n
  #     - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
  #     - POSTGRES_DB=n8n
  #     - PGDATA=/var/lib/postgresql/data/pgdata   # keeps init scripts clean
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U n8n"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  traefik:
    image: "traefik"
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  n8n_data:
    external: true
    name: n8n_data
  traefik_data:
    external: true
    name: traefik_data
  # postgres_data:

